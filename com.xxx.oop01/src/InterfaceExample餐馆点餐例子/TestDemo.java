package InterfaceExample餐馆点餐例子;
/**
 类型和类型之间的关系:
 *        isa、hasa、likea
 *  is a:
 *        Cat is a Animal(猫是一个动物)
 *                  凡是能够满足is a的表示"继承关系”
 * has a:
 *       I has a Pen (我有一支笔)
 *          凡是能够满足has a关系的表示"关联关系”
 *  关联关系通常以”属性”的形式存在。
 * like a:
 *     cooker like a FoodMenu (厨师像一个菜单一样)
 *            凡是能够满足like a关系的表示"实现关系”
 * 实现关系通常是:类实现接口。
 *
 *
 * */
//接口和多态一起使用
/**
 * 接口的使用离不开多态机制。(接口+多态才可以达到降低耦合度。)
        接口可以解耦合，解开的是谁和谁的耦合!!!
        任何一一个接口都有调用者和实现者。
        接口可以将调用者和实现者解耦合。
        调用者面向接口调用。
        实现者面向接口编写实现。
  **/
public class TestDemo {
    public static void main(String[] args) {
        //创建厨师对象
        FoodMenu cook1=new AmericanCooker();
        FoodMenu cook2=new ChinaCooker();
        //创建顾客对象
        Customer cst=new Customer(cook1);
        //顾客点菜的行为
        cst.order();
    }
}
/**
 * 抽象类和接口有什么区别?
 *    在这里我们只说一-下抽象类和接口在语法.上的区别。
 * 1.抽象类是半抽象的。
 * 2.接口是完全抽象的。
 * 3.抽象类中有构造方法。
 * 4.接口中没有构造方法。
 * 5.接口和接口之间支持多继承。
 * 6.类和类之间只能单继承。
 * 7. 一个类可以同时实现多个接口。
 * 8.一个抽象类只能继承一个类(单继承)。
 * 9.接口中只允许出现常量和抽象方法。
 * 10.这里先透露一个信息: 以后接口使用的比抽象类多。一般抽象类使用的还是少。
 *12. 接口一般都是对“行为”的抽象。
 *
 * */