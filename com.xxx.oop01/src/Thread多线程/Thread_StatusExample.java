package Thread多线程;
/**
   1. 线程的状态:
        新生状态 : new Thread,创建线程,一个线程处于新生状态
        就绪状态 : 线程准备好了,可以被cpu调度了,进入到就绪队列中,等待cpu的调度
        运行状态 : 当cpu调度到某一个就绪线程,这个线程就开始运行
        阻塞状态 : 当运行 过程中出现非正常情况,-->阻塞状态,等待阻塞状态的解除
        终止状态 : 一个线程正常执行结束,进入死亡状态
        注意:
            一个线程一旦进入到终止状态,无法恢复
            一个线程阻塞状态解除无法直接恢复运行 状态,会直接恢复到就绪状态,等待cpu调度
   2.  如何进入终止状态:
            1.正常执行完毕        2)通过添加标识判断-->最推荐        3)stop()->废弃,不推荐使用
   3.  如何进入到就绪状态:
            1.start()
            2.阻塞接触
            3.线程切换
            4.yield礼让线程
   4. 如何进入阻塞状态:
            1.sleep
            2.join
            3.wait
   5.  sleep(毫秒数)
        当前正在执行的线程休眠-->休眠指定ms时间
        让出cpu的资源,cpu就可以从新调度线程
        抱着资源睡觉-->对象的资源->锁
     作用:
        放大问题的可能性
        模拟网络延迟
     练习: 实现一个倒计时
 */
public class Thread_StatusExample {
    public static void main(String[] args) {

    }

}
